echo Ci0tLQphcGlWZXJzaW9uOiBhcGlleHRlbnNpb25zLms4cy5pby92MWJldGExCmtpbmQ6IEN1c3RvbVJlc291cmNlRGVmaW5pdGlvbgptZXRhZGF0YToKICBjcmVhdGlvblRpbWVzdGFtcDogbnVsbAogIG5hbWU6IGtsdXN0ZXJsZXRzLm9wZXJhdG9yLm9wZW4tY2x1c3Rlci1tYW5hZ2VtZW50LmlvCnNwZWM6CiAgZ3JvdXA6IG9wZXJhdG9yLm9wZW4tY2x1c3Rlci1tYW5hZ2VtZW50LmlvCiAgbmFtZXM6CiAgICBraW5kOiBLbHVzdGVybGV0CiAgICBsaXN0S2luZDogS2x1c3RlcmxldExpc3QKICAgIHBsdXJhbDoga2x1c3RlcmxldHMKICAgIHNpbmd1bGFyOiBrbHVzdGVybGV0CiAgc2NvcGU6IENsdXN0ZXIKICBzdWJyZXNvdXJjZXM6CiAgICBzdGF0dXM6IHt9CiAgdmFsaWRhdGlvbjoKICAgIG9wZW5BUElWM1NjaGVtYToKICAgICAgZGVzY3JpcHRpb246IEtsdXN0ZXJsZXQgcmVwcmVzZW50cyBjb250cm9sbGVycyBvbiB0aGUgbWFuYWdlZCBjbHVzdGVyLiBXaGVuCiAgICAgICAgY29uZmlndXJlZCwgdGhlIEtsdXN0ZXJsZXQgcmVxdWlyZXMgYSBzZWNyZXQgbmFtZWQgb2YgYm9vdHN0cmFwLWh1Yi1rdWJlY29uZmlnCiAgICAgICAgaW4gdGhlIHNhbWUgbmFtZXNwYWNlIHRvIGFsbG93IEFQSSByZXF1ZXN0cyB0byB0aGUgaHViIGZvciB0aGUgcmVnaXN0cmF0aW9uCiAgICAgICAgcHJvdG9jb2wuCiAgICAgIHR5cGU6IG9iamVjdAogICAgICBwcm9wZXJ0aWVzOgogICAgICAgIGFwaVZlcnNpb246CiAgICAgICAgICBkZXNjcmlwdGlvbjogJ0FQSVZlcnNpb24gZGVmaW5lcyB0aGUgdmVyc2lvbmVkIHNjaGVtYSBvZiB0aGlzIHJlcHJlc2VudGF0aW9uCiAgICAgICAgICAgIG9mIGFuIG9iamVjdC4gU2VydmVycyBzaG91bGQgY29udmVydCByZWNvZ25pemVkIHNjaGVtYXMgdG8gdGhlIGxhdGVzdAogICAgICAgICAgICBpbnRlcm5hbCB2YWx1ZSwgYW5kIG1heSByZWplY3QgdW5yZWNvZ25pemVkIHZhbHVlcy4gTW9yZSBpbmZvOiBodHRwczovL2dpdC5rOHMuaW8vY29tbXVuaXR5L2NvbnRyaWJ1dG9ycy9kZXZlbC9zaWctYXJjaGl0ZWN0dXJlL2FwaS1jb252ZW50aW9ucy5tZCNyZXNvdXJjZXMnCiAgICAgICAgICB0eXBlOiBzdHJpbmcKICAgICAgICBraW5kOgogICAgICAgICAgZGVzY3JpcHRpb246ICdLaW5kIGlzIGEgc3RyaW5nIHZhbHVlIHJlcHJlc2VudGluZyB0aGUgUkVTVCByZXNvdXJjZSB0aGlzCiAgICAgICAgICAgIG9iamVjdCByZXByZXNlbnRzLiBTZXJ2ZXJzIG1heSBpbmZlciB0aGlzIGZyb20gdGhlIGVuZHBvaW50IHRoZSBjbGllbnQKICAgICAgICAgICAgc3VibWl0cyByZXF1ZXN0cyB0by4gQ2Fubm90IGJlIHVwZGF0ZWQuIEluIENhbWVsQ2FzZS4gTW9yZSBpbmZvOiBodHRwczovL2dpdC5rOHMuaW8vY29tbXVuaXR5L2NvbnRyaWJ1dG9ycy9kZXZlbC9zaWctYXJjaGl0ZWN0dXJlL2FwaS1jb252ZW50aW9ucy5tZCN0eXBlcy1raW5kcycKICAgICAgICAgIHR5cGU6IHN0cmluZwogICAgICAgIG1ldGFkYXRhOgogICAgICAgICAgdHlwZTogb2JqZWN0CiAgICAgICAgc3BlYzoKICAgICAgICAgIGRlc2NyaXB0aW9uOiBTcGVjIHJlcHJlc2VudHMgdGhlIGRlc2lyZWQgZGVwbG95bWVudCBjb25maWd1cmF0aW9uIG9mIEtsdXN0ZXJsZXQKICAgICAgICAgICAgYWdlbnQuCiAgICAgICAgICB0eXBlOiBvYmplY3QKICAgICAgICAgIHByb3BlcnRpZXM6CiAgICAgICAgICAgIGNsdXN0ZXJOYW1lOgogICAgICAgICAgICAgIGRlc2NyaXB0aW9uOiBDbHVzdGVyTmFtZSBpcyB0aGUgbmFtZSBvZiB0aGUgbWFuYWdlZCBjbHVzdGVyIHRvIGJlIGNyZWF0ZWQKICAgICAgICAgICAgICAgIG9uIGh1Yi4gVGhlIEtsdXN0ZXJsZXQgYWdlbnQgZ2VuZXJhdGVzIGEgcmFuZG9tIG5hbWUgaWYgaXQgaXMgbm90CiAgICAgICAgICAgICAgICBzZXQsIG9yIGRpc2NvdmVycyB0aGUgYXBwcm9wcmlhdGUgY2x1c3RlciBuYW1lIG9uIG9wZW5zaGlmdC4KICAgICAgICAgICAgICB0eXBlOiBzdHJpbmcKICAgICAgICAgICAgZXh0ZXJuYWxTZXJ2ZXJVUkxzOgogICAgICAgICAgICAgIGRlc2NyaXB0aW9uOiBFeHRlcm5hbFNlcnZlclVSTHMgcmVwcmVzZW50cyB0aGUgYSBsaXN0IG9mIGFwaXNlcnZlciB1cmxzCiAgICAgICAgICAgICAgICBhbmQgY2EgYnVuZGxlcyB0aGF0IGlzIGFjY2Vzc2libGUgZXh0ZXJuYWxseSBJZiBpdCBpcyBzZXQgZW1wdHksIG1hbmFnZWQKICAgICAgICAgICAgICAgIGNsdXN0ZXIgaGFzIG5vIGV4dGVybmFsbHkgYWNjZXNzaWJsZSB1cmwgdGhhdCBodWIgY2x1c3RlciBjYW4gdmlzaXQuCiAgICAgICAgICAgICAgdHlwZTogYXJyYXkKICAgICAgICAgICAgICBpdGVtczoKICAgICAgICAgICAgICAgIGRlc2NyaXB0aW9uOiBTZXJ2ZXJVUkwgcmVwcmVzZW50cyB0aGUgYXBpc2VydmVyIHVybCBhbmQgY2EgYnVuZGxlCiAgICAgICAgICAgICAgICAgIHRoYXQgaXMgYWNjZXNzaWJsZSBleHRlcm5hbGx5CiAgICAgICAgICAgICAgICB0eXBlOiBvYmplY3QKICAgICAgICAgICAgICAgIHByb3BlcnRpZXM6CiAgICAgICAgICAgICAgICAgIGNhQnVuZGxlOgogICAgICAgICAgICAgICAgICAgIGRlc2NyaXB0aW9uOiBDQUJ1bmRsZSBpcyB0aGUgY2EgYnVuZGxlIHRvIGNvbm5lY3QgdG8gYXBpc2VydmVyCiAgICAgICAgICAgICAgICAgICAgICBvZiB0aGUgbWFuYWdlZCBjbHVzdGVyLiBTeXN0ZW0gY2VydHMgYXJlIHVzZWQgaWYgaXQgaXMgbm90IHNldC4KICAgICAgICAgICAgICAgICAgICB0eXBlOiBzdHJpbmcKICAgICAgICAgICAgICAgICAgICBmb3JtYXQ6IGJ5dGUKICAgICAgICAgICAgICAgICAgdXJsOgogICAgICAgICAgICAgICAgICAgIGRlc2NyaXB0aW9uOiBVUkwgaXMgdGhlIHVybCBvZiBhcGlzZXJ2ZXIgZW5kcG9pbnQgb2YgdGhlIG1hbmFnZWQKICAgICAgICAgICAgICAgICAgICAgIGNsdXN0ZXIuCiAgICAgICAgICAgICAgICAgICAgdHlwZTogc3RyaW5nCiAgICAgICAgICAgIG5hbWVzcGFjZToKICAgICAgICAgICAgICBkZXNjcmlwdGlvbjogTmFtZXNwYWNlIGlzIHRoZSBuYW1lc3BhY2UgdG8gZGVwbG95IHRoZSBhZ2VudC4gVGhlIG5hbWVzcGFjZQogICAgICAgICAgICAgICAgbXVzdCBoYXZlIGEgcHJlZml4IG9mICJvcGVuLWNsdXN0ZXItbWFuYWdlbWVudC0iLCBhbmQgaWYgaXQgaXMgbm90CiAgICAgICAgICAgICAgICBzZXQsIHRoZSBuYW1lc3BhY2Ugb2YgIm9wZW4tY2x1c3Rlci1tYW5hZ2VtZW50LWFnZW50IiBpcyB1c2VkIHRvIGRlcGxveQogICAgICAgICAgICAgICAgYWdlbnQuCiAgICAgICAgICAgICAgdHlwZTogc3RyaW5nCiAgICAgICAgICAgIHJlZ2lzdHJhdGlvbkltYWdlUHVsbFNwZWM6CiAgICAgICAgICAgICAgZGVzY3JpcHRpb246IFJlZ2lzdHJhdGlvbkltYWdlUHVsbFNwZWMgcmVwcmVzZW50cyB0aGUgZGVzaXJlZCBpbWFnZQogICAgICAgICAgICAgICAgY29uZmlndXJhdGlvbiBvZiByZWdpc3RyYXRpb24gYWdlbnQuCiAgICAgICAgICAgICAgdHlwZTogc3RyaW5nCiAgICAgICAgICAgIHdvcmtJbWFnZVB1bGxTcGVjOgogICAgICAgICAgICAgIGRlc2NyaXB0aW9uOiBXb3JrSW1hZ2VQdWxsU3BlYyByZXByZXNlbnRzIHRoZSBkZXNpcmVkIGltYWdlIGNvbmZpZ3VyYXRpb24KICAgICAgICAgICAgICAgIG9mIHdvcmsgYWdlbnQuCiAgICAgICAgICAgICAgdHlwZTogc3RyaW5nCiAgICAgICAgc3RhdHVzOgogICAgICAgICAgZGVzY3JpcHRpb246IFN0YXR1cyByZXByZXNlbnRzIHRoZSBjdXJyZW50IHN0YXR1cyBvZiBLbHVzdGVybGV0IGFnZW50LgogICAgICAgICAgdHlwZTogb2JqZWN0CiAgICAgICAgICBwcm9wZXJ0aWVzOgogICAgICAgICAgICBjb25kaXRpb25zOgogICAgICAgICAgICAgIGRlc2NyaXB0aW9uOiAnQ29uZGl0aW9ucyBjb250YWluIHRoZSBkaWZmZXJlbnQgY29uZGl0aW9uIHN0YXR1c2VzIGZvcgogICAgICAgICAgICAgICAgdGhpcyBLbHVzdGVybGV0LiBWYWxpZCBjb25kaXRpb24gdHlwZXMgYXJlOiBBcHBsaWVkOiBjb21wb25lbnRzIGhhdmUKICAgICAgICAgICAgICAgIGJlZW4gYXBwbGllZCBpbiB0aGUgbWFuYWdlZCBjbHVzdGVyLiBBdmFpbGFibGU6IGNvbXBvbmVudHMgaW4gdGhlCiAgICAgICAgICAgICAgICBtYW5hZ2VkIGNsdXN0ZXIgYXJlIGF2YWlsYWJsZSBhbmQgcmVhZHkgdG8gc2VydmUuIFByb2dyZXNzaW5nOiBjb21wb25lbnRzCiAgICAgICAgICAgICAgICBpbiB0aGUgbWFuYWdlZCBjbHVzdGVyIGFyZSBpbiBhIHRyYW5zaXRpb25pbmcgc3RhdGUuIERlZ3JhZGVkOiBjb21wb25lbnRzCiAgICAgICAgICAgICAgICBpbiB0aGUgbWFuYWdlZCBjbHVzdGVyIGRvIG5vdCBtYXRjaCB0aGUgZGVzaXJlZCBjb25maWd1cmF0aW9uIGFuZAogICAgICAgICAgICAgICAgb25seSBwcm92aWRlIGRlZ3JhZGVkIHNlcnZpY2UuJwogICAgICAgICAgICAgIHR5cGU6IGFycmF5CiAgICAgICAgICAgICAgaXRlbXM6CiAgICAgICAgICAgICAgICBkZXNjcmlwdGlvbjogU3RhdHVzQ29uZGl0aW9uIGNvbnRhaW5zIGNvbmRpdGlvbiBpbmZvcm1hdGlvbi4KICAgICAgICAgICAgICAgIHR5cGU6IG9iamVjdAogICAgICAgICAgICAgICAgcHJvcGVydGllczoKICAgICAgICAgICAgICAgICAgbGFzdFRyYW5zaXRpb25UaW1lOgogICAgICAgICAgICAgICAgICAgIGRlc2NyaXB0aW9uOiBMYXN0VHJhbnNpdGlvblRpbWUgaXMgdGhlIGxhc3QgdGltZSB0aGUgY29uZGl0aW9uCiAgICAgICAgICAgICAgICAgICAgICBjaGFuZ2VkIGZyb20gb25lIHN0YXR1cyB0byBhbm90aGVyLgogICAgICAgICAgICAgICAgICAgIHR5cGU6IHN0cmluZwogICAgICAgICAgICAgICAgICAgIGZvcm1hdDogZGF0ZS10aW1lCiAgICAgICAgICAgICAgICAgIG1lc3NhZ2U6CiAgICAgICAgICAgICAgICAgICAgZGVzY3JpcHRpb246IE1lc3NhZ2UgaXMgYSBodW1hbi1yZWFkYWJsZSBtZXNzYWdlIGluZGljYXRpbmcgZGV0YWlscwogICAgICAgICAgICAgICAgICAgICAgYWJvdXQgdGhlIGxhc3Qgc3RhdHVzIGNoYW5nZS4KICAgICAgICAgICAgICAgICAgICB0eXBlOiBzdHJpbmcKICAgICAgICAgICAgICAgICAgcmVhc29uOgogICAgICAgICAgICAgICAgICAgIGRlc2NyaXB0aW9uOiBSZWFzb24gaXMgYSAoYnJpZWYpIHJlYXNvbiBmb3IgdGhlIGNvbmRpdGlvbidzIGxhc3QKICAgICAgICAgICAgICAgICAgICAgIHN0YXR1cyBjaGFuZ2UuCiAgICAgICAgICAgICAgICAgICAgdHlwZTogc3RyaW5nCiAgICAgICAgICAgICAgICAgIHN0YXR1czoKICAgICAgICAgICAgICAgICAgICBkZXNjcmlwdGlvbjogU3RhdHVzIGlzIHRoZSBzdGF0dXMgb2YgdGhlIGNvbmRpdGlvbi4gT25lIG9mIFRydWUsCiAgICAgICAgICAgICAgICAgICAgICBGYWxzZSwgVW5rbm93bi4KICAgICAgICAgICAgICAgICAgICB0eXBlOiBzdHJpbmcKICAgICAgICAgICAgICAgICAgdHlwZToKICAgICAgICAgICAgICAgICAgICBkZXNjcmlwdGlvbjogVHlwZSBpcyB0aGUgdHlwZSBvZiB0aGUgY2x1c3RlciBjb25kaXRpb24uCiAgICAgICAgICAgICAgICAgICAgdHlwZTogc3RyaW5nCiAgdmVyc2lvbjogdjEKICB2ZXJzaW9uczoKICAtIG5hbWU6IHYxCiAgICBzZXJ2ZWQ6IHRydWUKICAgIHN0b3JhZ2U6IHRydWUKc3RhdHVzOgogIGFjY2VwdGVkTmFtZXM6CiAgICBraW5kOiAiIgogICAgcGx1cmFsOiAiIgogIGNvbmRpdGlvbnM6IFtdCiAgc3RvcmVkVmVyc2lvbnM6IFtd | base64 --decode | kubectl apply -f - && sleep 2 &&
    echo  | base64 --decode | kubectl apply -f -
